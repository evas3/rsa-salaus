import unittest
from encryptionkeys import EncryptionKeys

class TestEncryptionKeys(unittest.TestCase):
    def setUp(self):
        pass

    def test_private_key_d_int(self):
        primes
        for i in range(0, 4):
            d = EncryptionKeys().private_key_d(primes[i], primes[-1-i], 65537)
            self.assertEqual(d.is_integer(), True)
            self.assertGreater(d, 0)

    def test_private_key_d_big(self):
        primes
        for i in range(0, 3):
            d = EncryptionKeys().private_key_d(primes[i], primes[-1-i], 65537)
            self.assertGreater(d.bit_length(), 2047)

    def test_public_key_e_range(self):
        for i in range(6*10**30, (6*10**30)+10):
            e = EncryptionKeys().public_key_e(i)
            self.assertGreater(e, 2)
            self.assertLess(e, i)

    def test_public_key_e_integer(self):
        for i in range(6*10**30, (6*10**30)+10):
            e = EncryptionKeys().public_key_e(i)
            self.assertEqual(e.is_integer(), True)

    def test_public_key_e_vs_lam(self):
        for i in range(6*10**30, (6*10**30)+10):
            e = EncryptionKeys().public_key_e(i)
            gcd = EncryptionKeys().gcd(i, e)
            self.assertEqual(gcd, 1)

    def test_gcd_integer(self):
        for i in range(6*10**300, (6*10**300)+10):
            gcd = EncryptionKeys().gcd(i, i*2-3)
            self.assertEqual(gcd.is_integer(), True)
            self.assertGreater(gcd, 0)
    
    def test_gcd_1(self):
        for i in range(6*10**300, (6*10**300)+10):
            gcd = EncryptionKeys().gcd(i, i+1)
            self.assertEqual(gcd, 1)

    def test_gcd_self(self):
        for i in range(6*10**300, (6*10**300)+10):
            gcd = EncryptionKeys().gcd(i, i)
            self.assertEqual(gcd, i)
    
    def test_gcd_non1(self):
        true_gcd = [338, 3, 2, 13, 10, 3, 2, 5, 31, 3]
        lista = [(3268610410, 5424291262), (6039329694, 2734897803), (6324357942, 5660672372), (2206847695, 5536483953), (9306189450, 7599151930), (4961629152, 7773629163), (1715727246, 4609328518), (6961537720, 1264943635), (8578918951, 7570936157), (7196780457, 6306919158)]
        for i in range(0, 10):
            gcd = EncryptionKeys().gcd(lista[i][0], lista[i][1])
            self.assertEqual(gcd, true_gcd[i])
